<?php
/**
 * KloutitCaseResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kloutit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright 2024 Kloutit Technologies S.L.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kloutit\Model;

use \ArrayAccess;
use \Kloutit\ObjectSerializer;

/**
 * KloutitCaseResponse Class Doc Comment
 *
 * @category Class
 * @package  Kloutit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KloutitCaseResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KloutitCaseResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'active' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'is_deleted' => 'bool',
        'deleted_at' => '\DateTime',
        'purchase_date' => '\DateTime',
        'service' => 'string',
        'product' => 'string',
        'is_charge_refundable' => 'bool',
        'customer_name' => 'string',
        'customer_email' => 'string',
        'customer_phone' => 'string',
        'service_date' => '\DateTime',
        'service_was_provided' => 'bool',
        'checkin_date' => '\DateTime',
        'checkout_date' => '\DateTime',
        'hotel_name' => 'string',
        'rate' => 'string',
        'checkin_confirmation' => 'bool',
        'destination_country' => 'string',
        'departure_date' => '\DateTime',
        'arrival_date' => '\DateTime',
        'departure_airport' => 'string',
        'arrival_airport' => 'string',
        'shipping_city' => 'string',
        'shipping_province' => 'string',
        'shipping_postal_code' => 'string',
        'shipping_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'delivery_company' => 'string',
        'delivery_confirmation' => 'bool',
        'commitment_start_date' => '\DateTime',
        'commitment_end_date' => '\DateTime',
        'expedient_number' => 'string',
        'notification_date' => '\DateTime',
        'dispute_amount' => '\Kloutit\Model\AmountDto',
        'chargeback_reason' => 'string',
        'deadline' => '\DateTime',
        'contact_date' => '\DateTime',
        'communications' => '\Kloutit\Model\CommunicationItemDto[]',
        'additional_info' => 'string',
        'pan_number' => 'string',
        'transaction_id' => 'string',
        'transaction_date' => '\DateTime',
        'purchase_amount' => '\Kloutit\Model\AmountDto',
        'bank_name' => 'string',
        'card_brand' => 'string',
        'is3_ds_purchase' => 'bool',
        'organization' => '\Kloutit\Model\OrganizationDto',
        'dispute' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'active' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'is_deleted' => null,
        'deleted_at' => 'date-time',
        'purchase_date' => 'date-time',
        'service' => null,
        'product' => null,
        'is_charge_refundable' => null,
        'customer_name' => null,
        'customer_email' => null,
        'customer_phone' => null,
        'service_date' => 'date-time',
        'service_was_provided' => null,
        'checkin_date' => 'date-time',
        'checkout_date' => 'date-time',
        'hotel_name' => null,
        'rate' => null,
        'checkin_confirmation' => null,
        'destination_country' => null,
        'departure_date' => 'date-time',
        'arrival_date' => 'date-time',
        'departure_airport' => null,
        'arrival_airport' => null,
        'shipping_city' => null,
        'shipping_province' => null,
        'shipping_postal_code' => null,
        'shipping_date' => 'date-time',
        'delivery_date' => 'date-time',
        'delivery_company' => null,
        'delivery_confirmation' => null,
        'commitment_start_date' => 'date-time',
        'commitment_end_date' => 'date-time',
        'expedient_number' => null,
        'notification_date' => 'date-time',
        'dispute_amount' => null,
        'chargeback_reason' => null,
        'deadline' => 'date-time',
        'contact_date' => 'date-time',
        'communications' => null,
        'additional_info' => null,
        'pan_number' => null,
        'transaction_id' => null,
        'transaction_date' => 'date-time',
        'purchase_amount' => null,
        'bank_name' => null,
        'card_brand' => null,
        'is3_ds_purchase' => null,
        'organization' => null,
        'dispute' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'active' => false,
        'created_at' => false,
        'updated_at' => false,
        'is_deleted' => false,
        'deleted_at' => false,
        'purchase_date' => false,
        'service' => false,
        'product' => false,
        'is_charge_refundable' => false,
        'customer_name' => false,
        'customer_email' => false,
        'customer_phone' => false,
        'service_date' => false,
        'service_was_provided' => false,
        'checkin_date' => false,
        'checkout_date' => false,
        'hotel_name' => false,
        'rate' => false,
        'checkin_confirmation' => false,
        'destination_country' => false,
        'departure_date' => false,
        'arrival_date' => false,
        'departure_airport' => false,
        'arrival_airport' => false,
        'shipping_city' => false,
        'shipping_province' => false,
        'shipping_postal_code' => false,
        'shipping_date' => false,
        'delivery_date' => false,
        'delivery_company' => false,
        'delivery_confirmation' => false,
        'commitment_start_date' => false,
        'commitment_end_date' => false,
        'expedient_number' => false,
        'notification_date' => false,
        'dispute_amount' => false,
        'chargeback_reason' => false,
        'deadline' => false,
        'contact_date' => false,
        'communications' => false,
        'additional_info' => false,
        'pan_number' => false,
        'transaction_id' => false,
        'transaction_date' => false,
        'purchase_amount' => false,
        'bank_name' => false,
        'card_brand' => false,
        'is3_ds_purchase' => false,
        'organization' => false,
        'dispute' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_deleted' => 'isDeleted',
        'deleted_at' => 'deletedAt',
        'purchase_date' => 'purchaseDate',
        'service' => 'service',
        'product' => 'product',
        'is_charge_refundable' => 'isChargeRefundable',
        'customer_name' => 'customerName',
        'customer_email' => 'customerEmail',
        'customer_phone' => 'customerPhone',
        'service_date' => 'serviceDate',
        'service_was_provided' => 'serviceWasProvided',
        'checkin_date' => 'checkinDate',
        'checkout_date' => 'checkoutDate',
        'hotel_name' => 'hotelName',
        'rate' => 'rate',
        'checkin_confirmation' => 'checkinConfirmation',
        'destination_country' => 'destinationCountry',
        'departure_date' => 'departureDate',
        'arrival_date' => 'arrivalDate',
        'departure_airport' => 'departureAirport',
        'arrival_airport' => 'arrivalAirport',
        'shipping_city' => 'shippingCity',
        'shipping_province' => 'shippingProvince',
        'shipping_postal_code' => 'shippingPostalCode',
        'shipping_date' => 'shippingDate',
        'delivery_date' => 'deliveryDate',
        'delivery_company' => 'deliveryCompany',
        'delivery_confirmation' => 'deliveryConfirmation',
        'commitment_start_date' => 'commitmentStartDate',
        'commitment_end_date' => 'commitmentEndDate',
        'expedient_number' => 'expedientNumber',
        'notification_date' => 'notificationDate',
        'dispute_amount' => 'disputeAmount',
        'chargeback_reason' => 'chargebackReason',
        'deadline' => 'deadline',
        'contact_date' => 'contactDate',
        'communications' => 'communications',
        'additional_info' => 'additionalInfo',
        'pan_number' => 'panNumber',
        'transaction_id' => 'transactionId',
        'transaction_date' => 'transactionDate',
        'purchase_amount' => 'purchaseAmount',
        'bank_name' => 'bankName',
        'card_brand' => 'cardBrand',
        'is3_ds_purchase' => 'is3DSPurchase',
        'organization' => 'organization',
        'dispute' => 'dispute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_deleted' => 'setIsDeleted',
        'deleted_at' => 'setDeletedAt',
        'purchase_date' => 'setPurchaseDate',
        'service' => 'setService',
        'product' => 'setProduct',
        'is_charge_refundable' => 'setIsChargeRefundable',
        'customer_name' => 'setCustomerName',
        'customer_email' => 'setCustomerEmail',
        'customer_phone' => 'setCustomerPhone',
        'service_date' => 'setServiceDate',
        'service_was_provided' => 'setServiceWasProvided',
        'checkin_date' => 'setCheckinDate',
        'checkout_date' => 'setCheckoutDate',
        'hotel_name' => 'setHotelName',
        'rate' => 'setRate',
        'checkin_confirmation' => 'setCheckinConfirmation',
        'destination_country' => 'setDestinationCountry',
        'departure_date' => 'setDepartureDate',
        'arrival_date' => 'setArrivalDate',
        'departure_airport' => 'setDepartureAirport',
        'arrival_airport' => 'setArrivalAirport',
        'shipping_city' => 'setShippingCity',
        'shipping_province' => 'setShippingProvince',
        'shipping_postal_code' => 'setShippingPostalCode',
        'shipping_date' => 'setShippingDate',
        'delivery_date' => 'setDeliveryDate',
        'delivery_company' => 'setDeliveryCompany',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'commitment_start_date' => 'setCommitmentStartDate',
        'commitment_end_date' => 'setCommitmentEndDate',
        'expedient_number' => 'setExpedientNumber',
        'notification_date' => 'setNotificationDate',
        'dispute_amount' => 'setDisputeAmount',
        'chargeback_reason' => 'setChargebackReason',
        'deadline' => 'setDeadline',
        'contact_date' => 'setContactDate',
        'communications' => 'setCommunications',
        'additional_info' => 'setAdditionalInfo',
        'pan_number' => 'setPanNumber',
        'transaction_id' => 'setTransactionId',
        'transaction_date' => 'setTransactionDate',
        'purchase_amount' => 'setPurchaseAmount',
        'bank_name' => 'setBankName',
        'card_brand' => 'setCardBrand',
        'is3_ds_purchase' => 'setIs3DsPurchase',
        'organization' => 'setOrganization',
        'dispute' => 'setDispute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_deleted' => 'getIsDeleted',
        'deleted_at' => 'getDeletedAt',
        'purchase_date' => 'getPurchaseDate',
        'service' => 'getService',
        'product' => 'getProduct',
        'is_charge_refundable' => 'getIsChargeRefundable',
        'customer_name' => 'getCustomerName',
        'customer_email' => 'getCustomerEmail',
        'customer_phone' => 'getCustomerPhone',
        'service_date' => 'getServiceDate',
        'service_was_provided' => 'getServiceWasProvided',
        'checkin_date' => 'getCheckinDate',
        'checkout_date' => 'getCheckoutDate',
        'hotel_name' => 'getHotelName',
        'rate' => 'getRate',
        'checkin_confirmation' => 'getCheckinConfirmation',
        'destination_country' => 'getDestinationCountry',
        'departure_date' => 'getDepartureDate',
        'arrival_date' => 'getArrivalDate',
        'departure_airport' => 'getDepartureAirport',
        'arrival_airport' => 'getArrivalAirport',
        'shipping_city' => 'getShippingCity',
        'shipping_province' => 'getShippingProvince',
        'shipping_postal_code' => 'getShippingPostalCode',
        'shipping_date' => 'getShippingDate',
        'delivery_date' => 'getDeliveryDate',
        'delivery_company' => 'getDeliveryCompany',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'commitment_start_date' => 'getCommitmentStartDate',
        'commitment_end_date' => 'getCommitmentEndDate',
        'expedient_number' => 'getExpedientNumber',
        'notification_date' => 'getNotificationDate',
        'dispute_amount' => 'getDisputeAmount',
        'chargeback_reason' => 'getChargebackReason',
        'deadline' => 'getDeadline',
        'contact_date' => 'getContactDate',
        'communications' => 'getCommunications',
        'additional_info' => 'getAdditionalInfo',
        'pan_number' => 'getPanNumber',
        'transaction_id' => 'getTransactionId',
        'transaction_date' => 'getTransactionDate',
        'purchase_amount' => 'getPurchaseAmount',
        'bank_name' => 'getBankName',
        'card_brand' => 'getCardBrand',
        'is3_ds_purchase' => 'getIs3DsPurchase',
        'organization' => 'getOrganization',
        'dispute' => 'getDispute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], false);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('purchase_date', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('is_charge_refundable', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('customer_phone', $data ?? [], null);
        $this->setIfExists('service_date', $data ?? [], null);
        $this->setIfExists('service_was_provided', $data ?? [], null);
        $this->setIfExists('checkin_date', $data ?? [], null);
        $this->setIfExists('checkout_date', $data ?? [], null);
        $this->setIfExists('hotel_name', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('checkin_confirmation', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('departure_date', $data ?? [], null);
        $this->setIfExists('arrival_date', $data ?? [], null);
        $this->setIfExists('departure_airport', $data ?? [], null);
        $this->setIfExists('arrival_airport', $data ?? [], null);
        $this->setIfExists('shipping_city', $data ?? [], null);
        $this->setIfExists('shipping_province', $data ?? [], null);
        $this->setIfExists('shipping_postal_code', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_company', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('commitment_start_date', $data ?? [], null);
        $this->setIfExists('commitment_end_date', $data ?? [], null);
        $this->setIfExists('expedient_number', $data ?? [], null);
        $this->setIfExists('notification_date', $data ?? [], null);
        $this->setIfExists('dispute_amount', $data ?? [], null);
        $this->setIfExists('chargeback_reason', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('contact_date', $data ?? [], null);
        $this->setIfExists('communications', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
        $this->setIfExists('pan_number', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('purchase_amount', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('card_brand', $data ?? [], null);
        $this->setIfExists('is3_ds_purchase', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('dispute', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_date'] === null) {
            $invalidProperties[] = "'purchase_date' can't be null";
        }
        if ($this->container['is_charge_refundable'] === null) {
            $invalidProperties[] = "'is_charge_refundable' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['customer_email'] === null) {
            $invalidProperties[] = "'customer_email' can't be null";
        }
        if ($this->container['expedient_number'] === null) {
            $invalidProperties[] = "'expedient_number' can't be null";
        }
        if ($this->container['notification_date'] === null) {
            $invalidProperties[] = "'notification_date' can't be null";
        }
        if ($this->container['dispute_amount'] === null) {
            $invalidProperties[] = "'dispute_amount' can't be null";
        }
        if ($this->container['chargeback_reason'] === null) {
            $invalidProperties[] = "'chargeback_reason' can't be null";
        }
        if ($this->container['transaction_date'] === null) {
            $invalidProperties[] = "'transaction_date' can't be null";
        }
        if ($this->container['purchase_amount'] === null) {
            $invalidProperties[] = "'purchase_amount' can't be null";
        }
        if ($this->container['is3_ds_purchase'] === null) {
            $invalidProperties[] = "'is3_ds_purchase' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets purchase_date
     *
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->container['purchase_date'];
    }

    /**
     * Sets purchase_date
     *
     * @param \DateTime $purchase_date Date when the customer made the purchase.
     *
     * @return self
     */
    public function setPurchaseDate($purchase_date)
    {
        if (is_null($purchase_date)) {
            throw new \InvalidArgumentException('non-nullable purchase_date cannot be null');
        }
        $this->container['purchase_date'] = $purchase_date;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string|null $service Service that the customer bought.
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product that the customer bought.
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets is_charge_refundable
     *
     * @return bool
     */
    public function getIsChargeRefundable()
    {
        return $this->container['is_charge_refundable'];
    }

    /**
     * Sets is_charge_refundable
     *
     * @param bool $is_charge_refundable Flag that indicates if the charge made is refundable regarding your company terms and conditions.
     *
     * @return self
     */
    public function setIsChargeRefundable($is_charge_refundable)
    {
        if (is_null($is_charge_refundable)) {
            throw new \InvalidArgumentException('non-nullable is_charge_refundable cannot be null');
        }
        $this->container['is_charge_refundable'] = $is_charge_refundable;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Customer name.
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email Customer email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_phone
     *
     * @return string|null
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     *
     * @param string|null $customer_phone Customer phone.
     *
     * @return self
     */
    public function setCustomerPhone($customer_phone)
    {
        if (is_null($customer_phone)) {
            throw new \InvalidArgumentException('non-nullable customer_phone cannot be null');
        }
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets service_date
     *
     * @return \DateTime|null
     */
    public function getServiceDate()
    {
        return $this->container['service_date'];
    }

    /**
     * Sets service_date
     *
     * @param \DateTime|null $service_date Date when the serve was provided or will be provided.
     *
     * @return self
     */
    public function setServiceDate($service_date)
    {
        if (is_null($service_date)) {
            throw new \InvalidArgumentException('non-nullable service_date cannot be null');
        }
        $this->container['service_date'] = $service_date;

        return $this;
    }

    /**
     * Gets service_was_provided
     *
     * @return bool|null
     */
    public function getServiceWasProvided()
    {
        return $this->container['service_was_provided'];
    }

    /**
     * Sets service_was_provided
     *
     * @param bool|null $service_was_provided Flag that indicates if the service was provided or not.
     *
     * @return self
     */
    public function setServiceWasProvided($service_was_provided)
    {
        if (is_null($service_was_provided)) {
            throw new \InvalidArgumentException('non-nullable service_was_provided cannot be null');
        }
        $this->container['service_was_provided'] = $service_was_provided;

        return $this;
    }

    /**
     * Gets checkin_date
     *
     * @return \DateTime|null
     */
    public function getCheckinDate()
    {
        return $this->container['checkin_date'];
    }

    /**
     * Sets checkin_date
     *
     * @param \DateTime|null $checkin_date Check in date.
     *
     * @return self
     */
    public function setCheckinDate($checkin_date)
    {
        if (is_null($checkin_date)) {
            throw new \InvalidArgumentException('non-nullable checkin_date cannot be null');
        }
        $this->container['checkin_date'] = $checkin_date;

        return $this;
    }

    /**
     * Gets checkout_date
     *
     * @return \DateTime|null
     */
    public function getCheckoutDate()
    {
        return $this->container['checkout_date'];
    }

    /**
     * Sets checkout_date
     *
     * @param \DateTime|null $checkout_date Check out date.
     *
     * @return self
     */
    public function setCheckoutDate($checkout_date)
    {
        if (is_null($checkout_date)) {
            throw new \InvalidArgumentException('non-nullable checkout_date cannot be null');
        }
        $this->container['checkout_date'] = $checkout_date;

        return $this;
    }

    /**
     * Gets hotel_name
     *
     * @return string|null
     */
    public function getHotelName()
    {
        return $this->container['hotel_name'];
    }

    /**
     * Sets hotel_name
     *
     * @param string|null $hotel_name Hotel name.
     *
     * @return self
     */
    public function setHotelName($hotel_name)
    {
        if (is_null($hotel_name)) {
            throw new \InvalidArgumentException('non-nullable hotel_name cannot be null');
        }
        $this->container['hotel_name'] = $hotel_name;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate Rate applied.
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets checkin_confirmation
     *
     * @return bool|null
     */
    public function getCheckinConfirmation()
    {
        return $this->container['checkin_confirmation'];
    }

    /**
     * Sets checkin_confirmation
     *
     * @param bool|null $checkin_confirmation Flag that indicates if the client made the checkin or not.
     *
     * @return self
     */
    public function setCheckinConfirmation($checkin_confirmation)
    {
        if (is_null($checkin_confirmation)) {
            throw new \InvalidArgumentException('non-nullable checkin_confirmation cannot be null');
        }
        $this->container['checkin_confirmation'] = $checkin_confirmation;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string|null
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string|null $destination_country Destination country.
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets departure_date
     *
     * @return \DateTime|null
     */
    public function getDepartureDate()
    {
        return $this->container['departure_date'];
    }

    /**
     * Sets departure_date
     *
     * @param \DateTime|null $departure_date Departure date.
     *
     * @return self
     */
    public function setDepartureDate($departure_date)
    {
        if (is_null($departure_date)) {
            throw new \InvalidArgumentException('non-nullable departure_date cannot be null');
        }
        $this->container['departure_date'] = $departure_date;

        return $this;
    }

    /**
     * Gets arrival_date
     *
     * @return \DateTime|null
     */
    public function getArrivalDate()
    {
        return $this->container['arrival_date'];
    }

    /**
     * Sets arrival_date
     *
     * @param \DateTime|null $arrival_date Arrival date.
     *
     * @return self
     */
    public function setArrivalDate($arrival_date)
    {
        if (is_null($arrival_date)) {
            throw new \InvalidArgumentException('non-nullable arrival_date cannot be null');
        }
        $this->container['arrival_date'] = $arrival_date;

        return $this;
    }

    /**
     * Gets departure_airport
     *
     * @return string|null
     */
    public function getDepartureAirport()
    {
        return $this->container['departure_airport'];
    }

    /**
     * Sets departure_airport
     *
     * @param string|null $departure_airport Departure airport.
     *
     * @return self
     */
    public function setDepartureAirport($departure_airport)
    {
        if (is_null($departure_airport)) {
            throw new \InvalidArgumentException('non-nullable departure_airport cannot be null');
        }
        $this->container['departure_airport'] = $departure_airport;

        return $this;
    }

    /**
     * Gets arrival_airport
     *
     * @return string|null
     */
    public function getArrivalAirport()
    {
        return $this->container['arrival_airport'];
    }

    /**
     * Sets arrival_airport
     *
     * @param string|null $arrival_airport Arrival airport.
     *
     * @return self
     */
    public function setArrivalAirport($arrival_airport)
    {
        if (is_null($arrival_airport)) {
            throw new \InvalidArgumentException('non-nullable arrival_airport cannot be null');
        }
        $this->container['arrival_airport'] = $arrival_airport;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string|null
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string|null $shipping_city Shipping city.
     *
     * @return self
     */
    public function setShippingCity($shipping_city)
    {
        if (is_null($shipping_city)) {
            throw new \InvalidArgumentException('non-nullable shipping_city cannot be null');
        }
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_province
     *
     * @return string|null
     */
    public function getShippingProvince()
    {
        return $this->container['shipping_province'];
    }

    /**
     * Sets shipping_province
     *
     * @param string|null $shipping_province Shipping province.
     *
     * @return self
     */
    public function setShippingProvince($shipping_province)
    {
        if (is_null($shipping_province)) {
            throw new \InvalidArgumentException('non-nullable shipping_province cannot be null');
        }
        $this->container['shipping_province'] = $shipping_province;

        return $this;
    }

    /**
     * Gets shipping_postal_code
     *
     * @return string|null
     */
    public function getShippingPostalCode()
    {
        return $this->container['shipping_postal_code'];
    }

    /**
     * Sets shipping_postal_code
     *
     * @param string|null $shipping_postal_code Shipping postal code.
     *
     * @return self
     */
    public function setShippingPostalCode($shipping_postal_code)
    {
        if (is_null($shipping_postal_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_postal_code cannot be null');
        }
        $this->container['shipping_postal_code'] = $shipping_postal_code;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return \DateTime|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param \DateTime|null $shipping_date Shipping date.
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime|null $delivery_date Delivery date.
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_company
     *
     * @return string|null
     */
    public function getDeliveryCompany()
    {
        return $this->container['delivery_company'];
    }

    /**
     * Sets delivery_company
     *
     * @param string|null $delivery_company Delivery company.
     *
     * @return self
     */
    public function setDeliveryCompany($delivery_company)
    {
        if (is_null($delivery_company)) {
            throw new \InvalidArgumentException('non-nullable delivery_company cannot be null');
        }
        $this->container['delivery_company'] = $delivery_company;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return bool|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param bool|null $delivery_confirmation Flag that indicates if the customer received the product.
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            throw new \InvalidArgumentException('non-nullable delivery_confirmation cannot be null');
        }
        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets commitment_start_date
     *
     * @return \DateTime|null
     */
    public function getCommitmentStartDate()
    {
        return $this->container['commitment_start_date'];
    }

    /**
     * Sets commitment_start_date
     *
     * @param \DateTime|null $commitment_start_date Start date of the commitment that the customer has with the company.
     *
     * @return self
     */
    public function setCommitmentStartDate($commitment_start_date)
    {
        if (is_null($commitment_start_date)) {
            throw new \InvalidArgumentException('non-nullable commitment_start_date cannot be null');
        }
        $this->container['commitment_start_date'] = $commitment_start_date;

        return $this;
    }

    /**
     * Gets commitment_end_date
     *
     * @return \DateTime|null
     */
    public function getCommitmentEndDate()
    {
        return $this->container['commitment_end_date'];
    }

    /**
     * Sets commitment_end_date
     *
     * @param \DateTime|null $commitment_end_date End date of the commitment that the customer has with the company.
     *
     * @return self
     */
    public function setCommitmentEndDate($commitment_end_date)
    {
        if (is_null($commitment_end_date)) {
            throw new \InvalidArgumentException('non-nullable commitment_end_date cannot be null');
        }
        $this->container['commitment_end_date'] = $commitment_end_date;

        return $this;
    }

    /**
     * Gets expedient_number
     *
     * @return string
     */
    public function getExpedientNumber()
    {
        return $this->container['expedient_number'];
    }

    /**
     * Sets expedient_number
     *
     * @param string $expedient_number Chargeback expedient number.
     *
     * @return self
     */
    public function setExpedientNumber($expedient_number)
    {
        if (is_null($expedient_number)) {
            throw new \InvalidArgumentException('non-nullable expedient_number cannot be null');
        }
        $this->container['expedient_number'] = $expedient_number;

        return $this;
    }

    /**
     * Gets notification_date
     *
     * @return \DateTime
     */
    public function getNotificationDate()
    {
        return $this->container['notification_date'];
    }

    /**
     * Sets notification_date
     *
     * @param \DateTime $notification_date Chargeback notification date, when the merchant receives the chargeback notification.
     *
     * @return self
     */
    public function setNotificationDate($notification_date)
    {
        if (is_null($notification_date)) {
            throw new \InvalidArgumentException('non-nullable notification_date cannot be null');
        }
        $this->container['notification_date'] = $notification_date;

        return $this;
    }

    /**
     * Gets dispute_amount
     *
     * @return \Kloutit\Model\AmountDto
     */
    public function getDisputeAmount()
    {
        return $this->container['dispute_amount'];
    }

    /**
     * Sets dispute_amount
     *
     * @param \Kloutit\Model\AmountDto $dispute_amount Amount that the customer claims.
     *
     * @return self
     */
    public function setDisputeAmount($dispute_amount)
    {
        if (is_null($dispute_amount)) {
            throw new \InvalidArgumentException('non-nullable dispute_amount cannot be null');
        }
        $this->container['dispute_amount'] = $dispute_amount;

        return $this;
    }

    /**
     * Gets chargeback_reason
     *
     * @return string
     */
    public function getChargebackReason()
    {
        return $this->container['chargeback_reason'];
    }

    /**
     * Sets chargeback_reason
     *
     * @param string $chargeback_reason Reason why the customer is requesting the chargeback.
     *
     * @return self
     */
    public function setChargebackReason($chargeback_reason)
    {
        if (is_null($chargeback_reason)) {
            throw new \InvalidArgumentException('non-nullable chargeback_reason cannot be null');
        }
        $this->container['chargeback_reason'] = $chargeback_reason;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Deadline date to resolve this chargeback.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            throw new \InvalidArgumentException('non-nullable deadline cannot be null');
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets contact_date
     *
     * @return \DateTime|null
     */
    public function getContactDate()
    {
        return $this->container['contact_date'];
    }

    /**
     * Sets contact_date
     *
     * @param \DateTime|null $contact_date Date when the customer contacted to the merchant.
     *
     * @return self
     */
    public function setContactDate($contact_date)
    {
        if (is_null($contact_date)) {
            throw new \InvalidArgumentException('non-nullable contact_date cannot be null');
        }
        $this->container['contact_date'] = $contact_date;

        return $this;
    }

    /**
     * Gets communications
     *
     * @return \Kloutit\Model\CommunicationItemDto[]|null
     */
    public function getCommunications()
    {
        return $this->container['communications'];
    }

    /**
     * Sets communications
     *
     * @param \Kloutit\Model\CommunicationItemDto[]|null $communications Array of all the emails that the customer has sent regarding this dispute.
     *
     * @return self
     */
    public function setCommunications($communications)
    {
        if (is_null($communications)) {
            throw new \InvalidArgumentException('non-nullable communications cannot be null');
        }
        $this->container['communications'] = $communications;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string|null $additional_info Additional info related to the chargeback.
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets pan_number
     *
     * @return string|null
     */
    public function getPanNumber()
    {
        return $this->container['pan_number'];
    }

    /**
     * Sets pan_number
     *
     * @param string|null $pan_number Holder credit card number.
     *
     * @return self
     */
    public function setPanNumber($pan_number)
    {
        if (is_null($pan_number)) {
            throw new \InvalidArgumentException('non-nullable pan_number cannot be null');
        }
        $this->container['pan_number'] = $pan_number;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Transaction id.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date Transaction date.
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets purchase_amount
     *
     * @return \Kloutit\Model\AmountDto
     */
    public function getPurchaseAmount()
    {
        return $this->container['purchase_amount'];
    }

    /**
     * Sets purchase_amount
     *
     * @param \Kloutit\Model\AmountDto $purchase_amount Purchase amount.
     *
     * @return self
     */
    public function setPurchaseAmount($purchase_amount)
    {
        if (is_null($purchase_amount)) {
            throw new \InvalidArgumentException('non-nullable purchase_amount cannot be null');
        }
        $this->container['purchase_amount'] = $purchase_amount;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Customer bank name.
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return string|null
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param string|null $card_brand Card brand that the customer used to make the payment.
     *
     * @return self
     */
    public function setCardBrand($card_brand)
    {
        if (is_null($card_brand)) {
            throw new \InvalidArgumentException('non-nullable card_brand cannot be null');
        }
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets is3_ds_purchase
     *
     * @return bool
     */
    public function getIs3DsPurchase()
    {
        return $this->container['is3_ds_purchase'];
    }

    /**
     * Sets is3_ds_purchase
     *
     * @param bool $is3_ds_purchase Flag that indicates if the purchase has been made with 3DS.
     *
     * @return self
     */
    public function setIs3DsPurchase($is3_ds_purchase)
    {
        if (is_null($is3_ds_purchase)) {
            throw new \InvalidArgumentException('non-nullable is3_ds_purchase cannot be null');
        }
        $this->container['is3_ds_purchase'] = $is3_ds_purchase;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Kloutit\Model\OrganizationDto|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Kloutit\Model\OrganizationDto|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets dispute
     *
     * @return object|null
     */
    public function getDispute()
    {
        return $this->container['dispute'];
    }

    /**
     * Sets dispute
     *
     * @param object|null $dispute dispute
     *
     * @return self
     */
    public function setDispute($dispute)
    {
        if (is_null($dispute)) {
            throw new \InvalidArgumentException('non-nullable dispute cannot be null');
        }
        $this->container['dispute'] = $dispute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


