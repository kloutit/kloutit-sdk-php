<?php
/**
 * OrganizationDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kloutit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright 2024 Kloutit Technologies S.L.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kloutit\Model;

use \ArrayAccess;
use \Kloutit\ObjectSerializer;

/**
 * OrganizationDto Class Doc Comment
 *
 * @category Class
 * @package  Kloutit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'active' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'is_deleted' => 'bool',
        'deleted_at' => '\DateTime',
        'name' => 'string',
        'cif' => 'string',
        'billing_address' => 'string',
        'type' => 'string[]',
        'size' => 'object',
        'subscription_status' => 'object',
        'subscription_plan' => 'object',
        'terms_link' => 'string',
        'website' => 'string',
        'country' => 'string',
        'preferred_currency' => 'string',
        'language' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'active' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'is_deleted' => null,
        'deleted_at' => 'date-time',
        'name' => null,
        'cif' => null,
        'billing_address' => null,
        'type' => null,
        'size' => null,
        'subscription_status' => null,
        'subscription_plan' => null,
        'terms_link' => null,
        'website' => null,
        'country' => null,
        'preferred_currency' => null,
        'language' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'active' => false,
        'created_at' => false,
        'updated_at' => false,
        'is_deleted' => false,
        'deleted_at' => false,
        'name' => false,
        'cif' => false,
        'billing_address' => false,
        'type' => false,
        'size' => false,
        'subscription_status' => false,
        'subscription_plan' => false,
        'terms_link' => false,
        'website' => false,
        'country' => false,
        'preferred_currency' => false,
        'language' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_deleted' => 'isDeleted',
        'deleted_at' => 'deletedAt',
        'name' => 'name',
        'cif' => 'cif',
        'billing_address' => 'billingAddress',
        'type' => 'type',
        'size' => 'size',
        'subscription_status' => 'subscriptionStatus',
        'subscription_plan' => 'subscriptionPlan',
        'terms_link' => 'termsLink',
        'website' => 'website',
        'country' => 'country',
        'preferred_currency' => 'preferredCurrency',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_deleted' => 'setIsDeleted',
        'deleted_at' => 'setDeletedAt',
        'name' => 'setName',
        'cif' => 'setCif',
        'billing_address' => 'setBillingAddress',
        'type' => 'setType',
        'size' => 'setSize',
        'subscription_status' => 'setSubscriptionStatus',
        'subscription_plan' => 'setSubscriptionPlan',
        'terms_link' => 'setTermsLink',
        'website' => 'setWebsite',
        'country' => 'setCountry',
        'preferred_currency' => 'setPreferredCurrency',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_deleted' => 'getIsDeleted',
        'deleted_at' => 'getDeletedAt',
        'name' => 'getName',
        'cif' => 'getCif',
        'billing_address' => 'getBillingAddress',
        'type' => 'getType',
        'size' => 'getSize',
        'subscription_status' => 'getSubscriptionStatus',
        'subscription_plan' => 'getSubscriptionPlan',
        'terms_link' => 'getTermsLink',
        'website' => 'getWebsite',
        'country' => 'getCountry',
        'preferred_currency' => 'getPreferredCurrency',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EDUCATION = 'EDUCATION';
    public const TYPE_FASHION = 'FASHION';
    public const TYPE_FOOD = 'FOOD';
    public const TYPE_GAMING = 'GAMING';
    public const TYPE_HEALTH_BEAUTY = 'HEALTH_BEAUTY';
    public const TYPE_HOME = 'HOME';
    public const TYPE_LEISURE = 'LEISURE';
    public const TYPE_PHONE = 'PHONE';
    public const TYPE_SOFTWARE = 'SOFTWARE';
    public const TYPE_SPORT = 'SPORT';
    public const TYPE_SUPPLY = 'SUPPLY';
    public const TYPE_TECHNOLOGY = 'TECHNOLOGY';
    public const TYPE_TRAVEL_AIRLINE = 'TRAVEL_AIRLINE';
    public const TYPE_TRAVEL_HOTEL = 'TRAVEL_HOTEL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EDUCATION,
            self::TYPE_FASHION,
            self::TYPE_FOOD,
            self::TYPE_GAMING,
            self::TYPE_HEALTH_BEAUTY,
            self::TYPE_HOME,
            self::TYPE_LEISURE,
            self::TYPE_PHONE,
            self::TYPE_SOFTWARE,
            self::TYPE_SPORT,
            self::TYPE_SUPPLY,
            self::TYPE_TECHNOLOGY,
            self::TYPE_TRAVEL_AIRLINE,
            self::TYPE_TRAVEL_HOTEL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], false);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cif', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('subscription_status', $data ?? [], null);
        $this->setIfExists('subscription_plan', $data ?? [], null);
        $this->setIfExists('terms_link', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('preferred_currency', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['cif'] === null) {
            $invalidProperties[] = "'cif' can't be null";
        }
        if ($this->container['billing_address'] === null) {
            $invalidProperties[] = "'billing_address' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['subscription_status'] === null) {
            $invalidProperties[] = "'subscription_status' can't be null";
        }
        if ($this->container['terms_link'] === null) {
            $invalidProperties[] = "'terms_link' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['preferred_currency'] === null) {
            $invalidProperties[] = "'preferred_currency' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cif
     *
     * @return string
     */
    public function getCif()
    {
        return $this->container['cif'];
    }

    /**
     * Sets cif
     *
     * @param string $cif cif
     *
     * @return self
     */
    public function setCif($cif)
    {
        if (is_null($cif)) {
            throw new \InvalidArgumentException('non-nullable cif cannot be null');
        }
        $this->container['cif'] = $cif;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param string $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (array_diff($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return object
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param object $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets subscription_status
     *
     * @return object
     */
    public function getSubscriptionStatus()
    {
        return $this->container['subscription_status'];
    }

    /**
     * Sets subscription_status
     *
     * @param object $subscription_status subscription_status
     *
     * @return self
     */
    public function setSubscriptionStatus($subscription_status)
    {
        if (is_null($subscription_status)) {
            throw new \InvalidArgumentException('non-nullable subscription_status cannot be null');
        }
        $this->container['subscription_status'] = $subscription_status;

        return $this;
    }

    /**
     * Gets subscription_plan
     *
     * @return object|null
     */
    public function getSubscriptionPlan()
    {
        return $this->container['subscription_plan'];
    }

    /**
     * Sets subscription_plan
     *
     * @param object|null $subscription_plan subscription_plan
     *
     * @return self
     */
    public function setSubscriptionPlan($subscription_plan)
    {
        if (is_null($subscription_plan)) {
            throw new \InvalidArgumentException('non-nullable subscription_plan cannot be null');
        }
        $this->container['subscription_plan'] = $subscription_plan;

        return $this;
    }

    /**
     * Gets terms_link
     *
     * @return string
     */
    public function getTermsLink()
    {
        return $this->container['terms_link'];
    }

    /**
     * Sets terms_link
     *
     * @param string $terms_link terms_link
     *
     * @return self
     */
    public function setTermsLink($terms_link)
    {
        if (is_null($terms_link)) {
            throw new \InvalidArgumentException('non-nullable terms_link cannot be null');
        }
        $this->container['terms_link'] = $terms_link;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets preferred_currency
     *
     * @return string
     */
    public function getPreferredCurrency()
    {
        return $this->container['preferred_currency'];
    }

    /**
     * Sets preferred_currency
     *
     * @param string $preferred_currency preferred_currency
     *
     * @return self
     */
    public function setPreferredCurrency($preferred_currency)
    {
        if (is_null($preferred_currency)) {
            throw new \InvalidArgumentException('non-nullable preferred_currency cannot be null');
        }
        $this->container['preferred_currency'] = $preferred_currency;

        return $this;
    }

    /**
     * Gets language
     *
     * @return object
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param object $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


